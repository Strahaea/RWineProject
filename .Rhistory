}
return(-1)
}
a <- required_size(s=0.0202*sqrt(5000), d_min=0.01)
print (a)
a <- required_size(s=0.0202*sqrt(5000), d_min=0.01)
print (a)
required_size(s=0.0202*sqrt(5000), d_min=0.01)
required_size(s=0.00515*sqrt(5000), d_min=0.02)
required_size(s=0.0202*sqrt(5000), d_min=0.01, Ns=seq(10, 500000, 100))
get_z_star = function(alpha) {
return(-qnorm(alpha / 2))
get_beta = function(z_star, s, d_min, N) {
SE = s /  sqrt(N)
return(pnorm(z_star * SE, mean=d_min, sd=SE))
}
get_z_star = function(alpha) {
return(-qnorm(alpha / 2))
}
get_beta = function(z_star, s, d_min, N) {
SE = s /  sqrt(N)
return(pnorm(z_star * SE, mean=d_min, sd=SE))
}
required_size = function(s, d_min, Ns=1:20000, alpha=0.05, beta=0.2) {
for (N in Ns) {
if (get_beta(get_z_star(alpha), s, d_min, N) <= beta) {
return(N)
}
}
return(-1)
}
required_size(s=sqrt(0.0202*0.0549*0.0156), d_min=0.02)
required_size(s=0.0202*sqrt(3200), d_min=0.01, Ns=seq(10, 500000, 100))
required_size = function(s, d_min, Ns=1:20000, alpha=0.0167, beta=0.2) {
for (N in Ns) {
if (get_beta(get_z_star(alpha), s, d_min, N) <= beta) {
return(N)
}
}
return(-1)
}
get_beta = function(z_star, s, d_min, N) {
SE = s /  sqrt(N)
return(pnorm(z_star * SE, mean=d_min, sd=SE))
}
get_z_star = function(alpha) {
return(-qnorm(alpha / 2))
}
required_size(s=0.0202*sqrt(3200), d_min=0.01, Ns=seq(10, 500000, 100))
required_size(s=0.0156*sqrt(3200), d_min=0.0075, Ns=seq(10, 500000, 100))
required_size(s=0.0549*sqrt(3200), d_min=0.01, Ns=seq(10, 500000, 100))
required_size(s=0.0549*sqrt(3200), d_min=0.01, Ns=seq(10, 5000000, 100))
required_size = function(s, d_min, Ns=1:20000, alpha=0.05/3, beta=0.2) {
for (N in Ns) {
if (get_beta(get_z_star(alpha), s, d_min, N) <= beta) {
return(N)
}
}
return(-1)
}
required_size(s=0.0156*sqrt(3200), d_min=0.0075, Ns=seq(10, 500000, 100))
required_size(s=0.0549*sqrt(3200), d_min=0.01, Ns=seq(10, 5000000, 100))
required_size(s=0.0549*sqrt(3200), d_min=0.01, Ns=seq(10, 5000000, 100))
required_size = function(s, d_min, Ns=1:20000, alpha=(0.05/3), beta=0.2) {
for (N in Ns) {
if (get_beta(get_z_star(alpha), s, d_min, N) <= beta) {
return(N)
}
}
return(-1)
}
required_size(s=0.0549*sqrt(3200), d_min=0.01, Ns=seq(10, 5000000, 100))
required_size(s=0.0202*sqrt(3200), d_min=0.01, Ns=seq(10, 500000, 100))
required_size(s=0.0549*sqrt(3200), d_min=0.01, Ns=seq(10, 5000000, 100))
required_size(s=0.0156*sqrt(3200), d_min=0.0075, Ns=seq(10, 500000, 100))
required_size(s=0.0202*sqrt(5000), d_min=0.01, Ns=seq(10, 500000, 100))
required_size(s=0.0549*sqrt(5000), d_min=0.01, Ns=seq(10, 5000000, 100))
required_size(s=0.0156*sqrt(5000), d_min=0.0075, Ns=seq(10, 500000, 100))
required_size = function(s, d_min, Ns=1:20000, alpha=(0.05), beta=0.2) {
for (N in Ns) {
if (get_beta(get_z_star(alpha), s, d_min, N) <= beta) {
return(N)
}
}
return(-1)
}
required_size(s=0.0202*sqrt(5000), d_min=0.01, Ns=seq(10, 500000, 100))
required_size(s=0.0549*sqrt(5000), d_min=0.01, Ns=seq(10, 5000000, 100))
required_size(s=0.0156*sqrt(5000), d_min=0.0075, Ns=seq(10, 500000, 100))
required_size = function(s, d_min, Ns=1:20000, alpha=(0.05/2), beta=0.2) {
for (N in Ns) {
if (get_beta(get_z_star(alpha), s, d_min, N) <= beta) {
return(N)
}
}
return(-1)
}
required_size(s=0.0202*sqrt(5000), d_min=0.01, Ns=seq(10, 500000, 100))
required_size(s=0.0549*sqrt(5000), d_min=0.01, Ns=seq(10, 5000000, 100))
required_size(s=0.0156*sqrt(5000), d_min=0.0075, Ns=seq(10, 500000, 100))
required_size(s=0.0202*sqrt(5000), d_min=0.01, Ns=seq(10, 500000, 100))
required_size(s=0.0549*sqrt(5000), d_min=0.01, Ns=seq(10, 5000000, 100))
required_size(s=0.0156*sqrt(5000), d_min=0.0075, Ns=seq(10, 500000, 100))
required_size = function(s, d_min, Ns=1:20000, alpha=(0.05), beta=0.2) {
for (N in Ns) {
if (get_beta(get_z_star(alpha), s, d_min, N) <= beta) {
return(N)
}
}
return(-1)
}
required_size(s=0.0202*sqrt(5000), d_min=0.01, Ns=seq(10, 500000, 100))
required_size(s=0.0549*sqrt(5000), d_min=0.01, Ns=seq(10, 5000000, 100))
required_size(s=0.0156*sqrt(5000), d_min=0.0075, Ns=seq(10, 500000, 100))
required_size = function(s, d_min, Ns=1:20000, alpha=(0.05), beta=0.2) {
for (N in Ns) {
if (get_beta(get_z_star(alpha), s, d_min, N) <= beta) {
return(N)
}
}
return(-1)
}
required_size(s=0.0202*sqrt(5000), d_min=0.01, Ns=seq(10, 500000, 100))
required_size(s=0.0549*sqrt(5000), d_min=0.01, Ns=seq(10, 5000000, 100))
required_size(s=0.0156*sqrt(5000), d_min=0.0075, Ns=seq(10, 500000, 100))
required_size(s=0.0202*sqrt(5000), d_min=0.01, Ns=seq(10, 500000, 100)) +
required_size(s=0.0549*sqrt(5000), d_min=0.01, Ns=seq(10, 5000000, 100)) +
required_size(s=0.0156*sqrt(5000), d_min=0.0075, Ns=seq(10, 500000, 100))
required_size = function(s, d_min, Ns=1:20000, alpha=(0.05), beta=0.2) {
for (N in Ns) {
if (get_beta(get_z_star(alpha), s, d_min, N) <= beta) {
return(N)
}
}
return(-1)
}
required_size(s=0.0202*sqrt(5000), d_min=0.01, Ns=seq(10, 500000, 100)) +
required_size(s=0.0549*sqrt(5000), d_min=0.01, Ns=seq(10, 5000000, 100)) +
required_size(s=0.0156*sqrt(5000), d_min=0.0075, Ns=seq(10, 500000, 100))
required_size(s=0.0202, d_min=0.01, Ns=seq(10, 500000, 100)) +
required_size(s=0.0549, d_min=0.01, Ns=seq(10, 5000000, 100)) +
required_size(s=0.0156, d_min=0.0075, Ns=seq(10, 500000, 100))
required_size(s=0.0202, d_min=0.01, Ns=seq(10, 500000, 100)) +
required_size(s=0.0549, d_min=0.01, Ns=seq(10, 5000000, 100)) +
required_size(s=0.0156, d_min=0.0075, Ns=seq(10, 500000, 100))
required_size(s=0.0202, d_min=0.01, Ns=seq(10, 500000, 100))
required_size(s=0.0549, d_min=0.01, Ns=seq(10, 5000000, 100))
required_size(s=0.0156, d_min=0.0075, Ns=seq(10, 500000, 100))
required_size(s=0.0202, d_min=0.01) +
required_size(s=0.0549, d_min=0.01) +
required_size(s=0.0156, d_min=0.0075)
required_size(s=0.0202 * sqrt(5000), d_min=0.01) +
required_size(s=0.0549 * sqrt(5000), d_min=0.01) +
required_size(s=0.0156 *sqrt(5000), d_min=0.0075)
required_size(s=0.0202 * sqrt(5000), d_min=0.01)
required_size(s=(0.0202 * sqrt(5000)), d_min=0.01)
required_size = function(s, d_min, Ns=1:2000000, alpha=(0.05), beta=0.2) {
for (N in Ns) {
if (get_beta(get_z_star(alpha), s, d_min, N) <= beta) {
return(N)
}
}
return(-1)
}
required_size(s=(0.0202 * sqrt(5000)), d_min=0.01)
required_size(s=0.0549 * sqrt(5000), d_min=0.01)
required_size(s=(0.0202 * sqrt(5000)), d_min=0.01) +
required_size(s=0.0549 * sqrt(5000), d_min=0.01) +
required_size(s=0.0156 *sqrt(5000), d_min=0.0075)
required_size = function(s, d_min, Ns=1:2000000, alpha=(0.05/3), beta=0.2) {
for (N in Ns) {
if (get_beta(get_z_star(alpha), s, d_min, N) <= beta) {
return(N)
}
}
return(-1)
}
required_size(s=(0.0202 * sqrt(5000)), d_min=0.01) +
required_size(s=0.0549 * sqrt(5000), d_min=0.01) +
required_size(s=0.0156 *sqrt(5000), d_min=0.0075)
required_size(s=(0.0202 * sqrt(3200)), d_min=0.01) +
required_size(s=0.0549 * sqrt(3200), d_min=0.01) +
required_size(s=0.0156 *sqrt(3200), d_min=0.0075)
required_size(s=0.0549 * sqrt(3200), d_min=0.01)
required_size(s=(0.0202 * sqrt(5000)), d_min=0.01) +
required_size(s=0.0549 * sqrt(5000), d_min=0.01) +
required_size(s=0.0156 *sqrt(5000), d_min=0.0075)
required_size = function(s, d_min, Ns=1:2000000, alpha=(0.05), beta=0.2) {
for (N in Ns) {
if (get_beta(get_z_star(alpha), s, d_min, N) <= beta) {
return(N)
}
}
return(-1)
}
required_size(s=0.0549 * sqrt(5000), d_min=0.01)
required_size(s=sqrt(0.1*0.9*2), d_min=0.02)
345543/(345534+344660)
0.21887 - (1.96 * sqrt((0.21887*(1-0.21887))/345543))
0.21887 + (1.96 * sqrt((0.21887*(1-0.21887))/345543))
0.117562 - (1.96 * sqrt((0.117562*(1-0.117562))/345543))
0.117562 + (1.96 * sqrt((0.117562*(1-0.117562))/345543))
dhat <- 0.1983 - 0.2189
dhat
SE <- (0.0202 /sqrt(2/5000))* sqrt((1/345543) + (1/344660))
SE
dhatGR <- 0.1983 - 0.2189
dhatGR
#standard error math
SEGR <- (0.0202 /sqrt(2/5000))* sqrt((1/345543) + (1/344660))
SEGR
dhatGR <- 0.1983 - 0.2189
dhatGR
#standard error math
SEGR <- (0.0202 /sqrt(2/5000))* sqrt((1/345543) + (1/344660)) #population numbers right?
SEGR
mGR <- SEGR*2.24
dhatGR-mGR
dhatGR+mGR
dhatGR <- 0.1983 - 0.2189
dhatGR
#standard error math
SEGR <- (0.0202 /sqrt(2/5000))* sqrt((1/211362) + (1/212163)) #population numbers right?
SEGR
#m calculation, a bit unsure if 2.24 is right but makes sense with bonferroni correction
mGR <- SEGR*2.24
#Confidence Interval for Gross Conversion
dhatGR-mGR
dhatGR+mGR
dhatNC <- 0.11269 - 0.117562
dhatNC
#standard error math
SENC <- (0.0156 /sqrt(2/5000))* sqrt((1/211362) + (1/212163)) #population numbers right?
SENC
#m calculation, a bit unsure if 2.24 is right but makes sense with bonferroni correction
mNC <- SENC*2.24
#Confidence Interval for Gross Conversion
dhatNC-mNC
dhatNC+mNC
dhatGR <- 0.1983 - 0.2189
dhatGR
#standard error math
SEGR <- (0.0202 /sqrt(2/5000))* sqrt((1/211362) + (1/212163)) #population numbers right?
SEGR
#m calculation, a bit unsure if 2.24 is right but makes sense with bonferroni correction
mGR <- SEGR*1.96
#Confidence Interval for Gross Conversion
dhatGR-mGR
dhatGR+mGR
dhatNC <- 0.11269 - 0.117562
dhatNC
#standard error math
SENC <- (0.0156 /sqrt(2/5000))* sqrt((1/211362) + (1/212163)) #population numbers right?
SENC
#m calculation, a bit unsure if 2.24 is right but makes sense with bonferroni correction
mNC <- SENC*1.96
#Confidence Interval for Gross Conversion
dhatNC-mNC
dhatNC+mNC
dhatNC <- 0.11269 - 0.117562
dhatNC
#standard error math
SENC <- ((0.0156 /sqrt(2/5000))* sqrt((1/211362) + (1/212163))) #population numbers right?
SENC
#m calculation, a bit unsure if 2.24 is right but makes sense with bonferroni correction
mNC <- SENC*2.24
#Confidence Interval for Gross Conversion
dhatNC-mNC
dhatNC+mNC
dhatGR <- 0.1983 - 0.2189
dhatGR
#standard error math
SEGR <- (0.0202 /sqrt(2/5000))* sqrt((1/211362) + (1/212163)) #population numbers right?
SEGR
#m calculation, a bit unsure if 2.24 is right but makes sense with bonferroni correction
mGR <- SEGR*2.24
#Confidence Interval for Gross Conversion
dhatGR-mGR
dhatGR+mGR
dhatNC <- 0.11269 - 0.117562
dhatNC
#standard error math
SENC <- ((0.0156 /sqrt(2/5000))* sqrt((1/211362) + (1/212163))) #population numbers right?
SENC
#m calculation, a bit unsure if 2.24 is right but makes sense with bonferroni correction
mNC <- SENC*2.24
#Confidence Interval for Gross Conversion
dhatNC-mNC
dhatNC+mNC
dhatGR <- 0.1983 - 0.2189
dhatGR
#standard error math
SEGR <- (0.0202 /sqrt(2/5000))* sqrt((1/211362) + (1/212163)) #population numbers right?
SEGR
#m calculation, a bit unsure if 2.24 is right but makes sense with bonferroni correction
mGR <- SEGR*1.96
#Confidence Interval for Gross Conversion
dhatGR-mGR
dhatGR+mGR
dhatGR <- (0.1983 - 0.2189)
dhatGR
#standard error math
SEGR <- (0.0202 /sqrt(2/5000))* sqrt((1/211362) + (1/212163)) #population numbers right?
SEGR
#m calculation, a bit unsure if 2.24 is right but makes sense with bonferroni correction
mGR <- SEGR*1.96
#Confidence Interval for Gross Conversion
dhatGR-mGR
dhatGR+mGR
dhatNC <- (0.11269 - 0.117562)
dhatNC
#standard error math
SENC <- ((0.0156 /sqrt(2/5000))* sqrt((1/211362) + (1/212163))) #population numbers right?
SENC
#m calculation, a bit unsure if 2.24 is right but makes sense with bonferroni correction
mNC <- SENC*1.96
#Confidence Interval for Gross Conversion
dhatNC-mNC
dhatNC+mNC
dhatGR <- (0.1983 - 0.2189)
dhatGR
#standard error math
SEGR <- (0.0202 /sqrt(2/5000))* sqrt((1/211362) + (1/212163)) #population numbers right?
SEGR
#m calculation, a bit unsure if 2.24 is right but makes sense with bonferroni correction
mGR <- SEGR*1.96
#Confidence Interval for Gross Conversion
dhatGR-mGR
dhatGR+mGR
dhatGR <- (0.1983 - 0.2189)
dhatGR
#standard error math
SEGR <- ((0.0202 /sqrt(2/5000))* sqrt((1/211362) + (1/212163))) #population numbers right?
SEGR
#m calculation, a bit unsure if 2.24 is right but makes sense with bonferroni correction
mGR <- SEGR*1.96
#Confidence Interval for Gross Conversion
dhatGR-mGR
dhatGR+mGR
(194+205)*2
required_size(s=(0.0202 * sqrt(400)*2), d_min=0.01)/.08
required_size(s=(0.0156*sqrt(400)*2), d_min=0.0075)/.08
required_size(s=0.0549 * sqrt(400)*2, d_min=0.01)/.08
#Gross Retention
dhatGR <- (0.1983 - 0.2189)
dhatGR
#standard error math
SEGR <- sqrt((0.1983*(1-0.1983)/211362)+(0.2189*(1-0.2189)/212163))
SEGR
#m calculation, a bit unsure if 2.24 is right but makes sense with bonferroni correction
mGR <- SEGR*1.96
#Confidence Interval for Gross Conversion
dhatGR-mGR
dhatGR+mGR
dhatNC <- (0.11269 - 0.117562)
dhatNC
#standard error math
SENC <- sqrt((0.11269*(1-0.11269)/211362)+(0.117562*(1-0.117562)/212163)) #population numbers right?
SENC
#m calculation, a bit unsure if 2.24 is right but makes sense with bonferroni correction
mNC <- SENC*1.96
#Confidence Interval for Gross Conversion
dhatNC-mNC
dhatNC+mNC
dhatGR <- (0.1983 - 0.2189)
dhatGR
#standard error math
SEGR <- sqrt((0.1983*(1-0.1983)/17260)+(0.2189*(1-0.2189)/17293))
SEGR
#m calculation, a bit unsure if 2.24 is right but makes sense with bonferroni correction
mGR <- SEGR*1.96
#Confidence Interval for Gross Conversion
dhatGR-mGR
dhatGR+mGR
dhatNC <- (0.11269 - 0.117562)
dhatNC
#standard error math
SENC <- sqrt((0.11269*(1-0.11269)/17260)+(0.117562*(1-0.117562)/17293)) #population numbers right?
SENC
#m calculation, a bit unsure if 2.24 is right but makes sense with bonferroni correction
mNC <- SENC*1.96
#Confidence Interval for Gross Conversion
dhatNC-mNC
dhatNC+mNC
dhatGR <- (0.1983 - 0.2189)
dhatGR
#standard error math
SEGR <- sqrt((0.1983*(1-0.1983)/17260)+(0.2189*(1-0.2189)/17293))
SEGR
#m calculation, a bit unsure if 2.24 is right but makes sense with bonferroni correction
mGR <- SEGR*1.96
#Confidence Interval for Gross Conversion
dhatGR-mGR
dhatGR+mGR
#Effect Size Tests
#Gross Retention
dhatGR <- (0.1983 - 0.2189)
dhatGR
#standard error math
SEGR <- sqrt((0.1983*(1-0.1983)/17260)+(0.2189*(1-0.2189)/17293))
SEGR
#m calculation, a bit unsure if 2.24 is right but makes sense with bonferroni correction
mGR <- SEGR*2.24
#Confidence Interval for Gross Conversion
dhatGR-mGR
dhatGR+mGR
dhatNC <- (0.11269 - 0.117562)
dhatNC
#standard error math
SENC <- sqrt((0.11269*(1-0.11269)/17260)+(0.117562*(1-0.117562)/17293)) #population numbers right?
SENC
#m calculation, a bit unsure if 2.24 is right but makes sense with bonferroni correction
mNC <- SENC*2.24
#Confidence Interval for Gross Conversion
dhatNC-mNC
dhatNC+mNC
dhatNC <- (0.11269 - 0.117562)
dhatNC
#standard error math
SENC <- sqrt((0.11269*(1-0.11269)/17260)+(0.117562*(1-0.117562)/17293)) #population numbers right?
SENC
#m calculation, a bit unsure if 2.24 is right but makes sense with bonferroni correction
mNC <- SENC*2.24
#Confidence Interval for Gross Conversion
dhatNC-mNC
dhatNC+mNC
#Effect Size Tests
#Gross Retention
dhatGR <- (0.1983 - 0.2189)
dhatGR
#standard error math
SEGR <- sqrt((0.1983*(1-0.1983)/17260)+(0.2189*(1-0.2189)/17293))
SEGR
#m calculation, a bit unsure if 2.24 is right but makes sense with bonferroni correction
mGR <- SEGR*2.24
#Confidence Interval for Gross Conversion
dhatGR-mGR
dhatGR+mGR
dhatGR <- (0.1983 - 0.2189)
dhatGR
#standard error math
SEGR <- sqrt((0.1983*(1-0.1983)/17260)+(0.2189*(1-0.2189)/17293))
SEGR
#m calculation, a bit unsure if 2.24 is right but makes sense with bonferroni correction
mGR <- SEGR*1.96
#Confidence Interval for Gross Conversion
dhatGR-mGR
dhatGR+mGR
dhatNC <- (0.11269 - 0.117562)
dhatNC
#standard error math
SENC <- sqrt((0.11269*(1-0.11269)/17260)+(0.117562*(1-0.117562)/17293)) #population numbers right?
SENC
#m calculation, a bit unsure if 2.24 is right but makes sense with bonferroni correction
mNC <- SENC*1.96
#Confidence Interval for Gross Conversion
dhatNC-mNC
dhatNC+mNC
dhatGR <- (0.1983 - 0.2189)
dhatGR
#standard error math
SEGR <- sqrt((0.1983*(1-0.1983)/17260)+(0.2189*(1-0.2189)/17293))
SEGR
#m calculation, a bit unsure if 2.24 is right but makes sense with bonferroni correction
mGR <- SEGR*2.24
#Confidence Interval for Gross Conversion
dhatGR-mGR
dhatGR+mGR
dhatNC <- (0.11269 - 0.117562)
dhatNC
#standard error math
SENC <- sqrt((0.11269*(1-0.11269)/17260)+(0.117562*(1-0.117562)/17293)) #population numbers right?
SENC
#m calculation, a bit unsure if 2.24 is right but makes sense with bonferroni correction
mNC <- SENC*2.24
#Confidence Interval for Gross Conversion
dhatNC-mNC
dhatNC+mNC
(194+205)*2
required_size(s=(0.0202 * sqrt(400)*2), d_min=0.01)/.08
required_size(s=(0.0156*sqrt(400)*2), d_min=0.0075)/.08
required_size(s=0.0549 * sqrt(400)*2, d_min=0.01)/.08
required_size = function(s, d_min, Ns=1:700000, alpha=0.05/2, beta=0.2) {
for (N in Ns) {
if (get_beta(get_z_star(alpha), s, d_min, N) <= beta) {
return(N)
}
}
return(-1)
}
required_size(s=(0.0202 * sqrt(400)*2), d_min=0.01)/.08
required_size(s=(0.0156*sqrt(400)*2), d_min=0.0075)/.08
qplot(data = wd, x = quality, binwidth = 0.5)
getwd()
setwd("C:/Users/Kenneth/Desktop/UdacityFC/R/IntrotoRFinalProject/")
list.files()
wd<- read.csv('wineQualityReds.csv')
qplot(data = wd, x = quality, binwidth = 0.5)
library(ggplot2)
qplot(data = wd, x = quality, binwidth = 0.5)
qplot(data = wd, x = pH)
qplot(data = wd, x = fixed.acidity)
View(wd)
qplot(data = wd, x = volate.acidity)
qplot(data = wd, x = volatile.acidity)
ggplot(aes(x = fixed.acidity, y = quality), data = wd) + geom_point(position = 'jitter')
qplot(data = wd, x = fixed.acidity)
ggplot(aes(x = fixed.acidity, y = quality), data = wd) + geom_point(position = 'jitter')
qplot(data = wd, x = fixed.acidity)
ggplot(aes(x = fixed.acidity, y = quality), data = wd) + geom_point(position = 'jitter')
qplot(data = wd, x = density)
ggplot(aes(x = fixed.acidity, y = quality), data = wd) + geom_point(position = 'jitter')
